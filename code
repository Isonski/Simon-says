#define NOTE_A4  440
#define NOTE_AS4 466
#define NOTE_B4  494
#define NOTE_C5  523
#define NOTE_CS5 523

#define startButton 2
#define button1  3
#define button2  4
#define button3  5
#define button4  6
#define LED1 7
#define LED2  8
#define LED3 9
#define LED4  10
#define buzzer  11

int sequence[90];
int player_sequence[90];
int level = 1;

int speed = 1000;

void setup() {
  pinMode(startButton, INPUT);
  pinMode(button1, INPUT);
  pinMode(button2, INPUT);
  pinMode(button3, INPUT);
  pinMode(button4, INPUT);
  pinMode(LED1, OUTPUT);
  pinMode(LED2, OUTPUT);
  pinMode(LED3, OUTPUT);
  pinMode(LED4, OUTPUT);
  pinMode(buzzer, OUTPUT);
  Serial.begin(9600);

  digitalWrite(LED1, LOW);
  digitalWrite(LED2, LOW);
  digitalWrite(LED3, LOW);
  digitalWrite(LED4, LOW);
}

void loop()
{
  if (level == 1)
    generate_sequence(); // generates the sequence

  // If the start button is pressed or the player is progressing
  if (digitalRead(startButton) == LOW || level != 1)
  {
    show_sequence();    // shows the sequence
    player_turn();      // player's turn
  }
  noTone(buzzer);
}

void show_sequence()
{
  digitalWrite(LED1, LOW);
  digitalWrite(LED2, LOW);
  digitalWrite(LED3, LOW);
  digitalWrite(LED4, LOW);

  for (int i = 0; i < level; i++)
  {
    switch (sequence[i]) {
      case (2):
        digitalWrite(LED1, HIGH);
        tone(buzzer, NOTE_CS5, 100);
        delay(speed);
        digitalWrite(LED1, LOW);
        noTone(buzzer);
        delay(200);
        break;

      case (3):
        digitalWrite(LED2, HIGH);
        tone(buzzer, NOTE_B4, 100);
        delay(speed);
        digitalWrite(LED2, LOW);
        noTone(buzzer);
        delay(200);
        break;

      case (4):
        digitalWrite(LED3, HIGH);
        tone(buzzer, NOTE_AS4, 100);
        delay(speed);
        digitalWrite(LED3, LOW);
        noTone(buzzer);
        delay(200);
        break;

      case (5):
        digitalWrite(LED4, HIGH);
        tone(buzzer, NOTE_A4, 100);
        delay(speed);
        digitalWrite(LED4, LOW);
        noTone(buzzer);
        delay(200);
        break;
    }
  }
  noTone(buzzer);
}

void player_turn()
{
  int flag = 0; // flag indicates if the input is valid

  for (int i = 0; i < level; i++)
  {
    flag = 0;
    while (flag == 0)
    {
      if (digitalRead(button4) == LOW)
      {
        digitalWrite(LED4, HIGH);
        player_sequence[i] = 5;
        tone(buzzer, NOTE_A4, 100);
        flag = 1;
        delay(200);
        if (player_sequence[i] != sequence[i])
        {
          wrong_sequence();
          return;
        }
        digitalWrite(LED4, LOW);
      }

      if (digitalRead(button3) == LOW)
      {
        digitalWrite(LED3, HIGH);
        player_sequence[i] = 4;
        tone(buzzer, NOTE_AS4, 100);
        flag = 1;
        delay(200);
        if (player_sequence[i] != sequence[i])
        {
          wrong_sequence();
          return;
        }
        digitalWrite(LED3, LOW);
      }

      if (digitalRead(button2) == LOW)
      {
        digitalWrite(LED2, HIGH);
        player_sequence[i] = 3;
        tone(buzzer, NOTE_B4, 100);
        flag = 1;
        delay(200);
        if (player_sequence[i] != sequence[i])
        {
          wrong_sequence();
          return;
        }
        digitalWrite(LED2, LOW);
      }

      if (digitalRead(button1) == LOW)
      {
        digitalWrite(LED1, HIGH);
        player_sequence[i] = 2;
        tone(buzzer, NOTE_CS5, 100);
        flag = 1;
        delay(200);
        if (player_sequence[i] != sequence[i])
        {
          wrong_sequence();
          return;
        }
        digitalWrite(LED1, LOW);
      }

    }
  }
  noTone(buzzer);
  correct_sequence();
}

void generate_sequence()
{
  randomSeed(millis()); // ensures the game generates a new sequence every time the game resets

  for (int i = 0; i < 90; i++)
  {
    sequence[i] = random(2, 6);
  }
}

void wrong_sequence()
{
  for (int i = 0; i < 3; i++)
  {
    digitalWrite(LED1, HIGH);
    digitalWrite(LED2, HIGH);
    digitalWrite(LED3, HIGH);
    digitalWrite(LED4, HIGH);
    tone(buzzer, 30);
    delay(250);
    digitalWrite(LED1, LOW);
    digitalWrite(LED2, LOW);
    digitalWrite(LED3, LOW);
    digitalWrite(LED4, LOW);
    tone(buzzer, 10);
    delay(250);
  }
  noTone(buzzer);
  level = 1;
  speed = 1000;
}

void correct_sequence()
{
  delay(500);
  digitalWrite(LED1, HIGH);
  digitalWrite(LED2, HIGH);
  digitalWrite(LED3, HIGH);
  digitalWrite(LED4, HIGH);
  tone(buzzer, NOTE_A4);
  delay(250);
  digitalWrite(LED1, LOW);
  digitalWrite(LED2, LOW);
  digitalWrite(LED3, LOW);
  digitalWrite(LED4, LOW);
  tone(buzzer, NOTE_AS4);
  delay(250);
  digitalWrite(LED1, HIGH);
  digitalWrite(LED2, HIGH);
  digitalWrite(LED3, HIGH);
  digitalWrite(LED4, HIGH);
  tone(buzzer, NOTE_B4);
  delay(250);
  digitalWrite(LED1, LOW);
  digitalWrite(LED2, LOW);
  digitalWrite(LED3, LOW);
  digitalWrite(LED4, LOW);
  tone(buzzer, NOTE_CS5);
  delay(1200);
  noTone(buzzer);
  delay(500);
  if (level < 90) 
    level++;
// increases difficulty after each level passed
  if (speed > 250) 
    speed -= 50;
}
